generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 유저 모델
model User {
  id        String           @id @default(uuid())
  email     String           @unique
  username  String
  password  String
  createdAt DateTime         @default(now())

  workspaces WorkspaceUser[] // 사용자 → 공간 연결 (다대다 관계)
  issues     Issue[] // 사용자 → 이슈 연결 (일대다 관계)
  comments   Comment[] // 사용자 → 댓글 연결 (일대다 관계)
}

// 공간 모델
model Workspace {
  id          String           @id @default(cuid())
  slug        String           @unique // 공간 고유 식별자
  name        String
  description String?
  createdAt   DateTime         @default(now())

  users       WorkspaceUser[] // 공간 → 사용자 연결 (다대다 관계)
  projects    Project[] // 공간 → 프로젝트 연결 (일대다 관계)
}

// 공간 사용자 중개 모델
// 유저-공간 연결 + 역할 정보 저장
model WorkspaceUser {
  id          String           @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole 

  user        User             @relation(fields: [userId], references: [id]) 
  workspace   Workspace        @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

// 공간 역할
enum WorkspaceRole {
  ADMIN
  MEMBER
}

// 프로젝트 모델
model Project {
  id           String     @id @default(cuid())
  slug         String    @unique // 프로젝트 고유 식별자
  name         String
  description  String?
  workspaceId  String
  createdAt    DateTime   @default(now())

  workspace    Workspace  @relation(fields: [workspaceId], references: [id])
  issues       Issue[] // 프로젝트 → 이슈 연결 (일대다 관계)
}

// 이슈 모델
model Issue {
  id          String   @id @default(cuid())
  number      Int      
  title       String
  description String?
  createdAt   DateTime @default(now())

  status      IssueStatus @default(TODO)

  projectId   String
  project     Project @relation(fields: [projectId], references: [id])

  authorId    String
  author      User @relation(fields: [authorId], references: [id])

  @@unique([projectId, number]) // 프로젝트 내 이슈 숫자 중복 방지

  comments Comment[] // 이슈 → 댓글 연결 (일대다 관계)
}

// 이슈 상태
enum IssueStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}


// 이슈 댓글 모델
model Comment {
  id        String   @id @default(cuid())
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  content   String

  createdAt DateTime @default(now())
}
